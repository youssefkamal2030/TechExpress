@model IEnumerable<TechXpress.Models.Dto_s.ProductDTO>
@{
    ViewData["Title"] = "Our Products";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form asp-action="Index" method="get" class="row g-3">
                        @Html.AntiForgeryToken()
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text bg-light border-0">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" name="searchTerm" class="form-control border-0 bg-light" placeholder="Search products..." value="@ViewBag.SearchTerm">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="input-group">
                                <span class="input-group-text bg-light border-0">
                                    <i class="bi bi-grid-3x3"></i>
                                </span>
                                <select name="categoryId" class="form-select border-0 bg-light">
                                    <option value="">All Categories</option>
                                    @foreach (var category in ViewBag.Categories)
                                    {
                                        <option value="@category.Id" selected="@(ViewBag.CurrentCategoryId == category.Id)">@category.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                <span class="input-group-text bg-light border-0">
                                    <i class="bi bi-currency-dollar"></i>
                                </span>
                                <input type="number" name="minPrice" class="form-control border-0 bg-light" placeholder="Min Price" value="@ViewBag.MinPrice" step="0.01">
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="input-group">
                                <span class="input-group-text bg-light border-0">
                                    <i class="bi bi-currency-dollar"></i>
                                </span>
                                <input type="number" name="maxPrice" class="form-control border-0 bg-light" placeholder="Max Price" value="@ViewBag.MaxPrice" step="0.01">
                            </div>
                        </div>
                        <div class="col-md-1">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-funnel me-1"></i>Filter
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<section class="py-5">
    <div class="container">
        <div class="section-header-with-link mb-4">
            <div>
                @{
                    var categoryName = "All Products";
                    if (ViewBag.CurrentCategoryId != null)
                    {
                        var categories = ViewBag.Categories as IEnumerable<TechXpress.Models.Dto_s.CategoryDTO>;
                        if (categories != null)
                        {
                            var category = categories.FirstOrDefault(c => c.Id == ViewBag.CurrentCategoryId);
                            if (category != null)
                            {
                                categoryName = category.Name;
                            }
                        }
                    }
                }
                <h2>@categoryName</h2>
                <p>Explore our selection of high-quality technology products</p>
            </div>
        </div>
        
        <div class="product-grid">
            @foreach (var product in Model)
            {
                <div class="product-card">
                    <div class="product-image">
                        <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id">
                            <img src="@(string.IsNullOrEmpty(product.ImageUrl) ? "/images/default-product.jpg" : product.ImageUrl)" alt="@product.Name">
                        </a>
                        @if (product.Stock <= 0)
                        {
                            <span class="discount-badge bg-danger">Out of Stock</span>
                        }
                        else if (product.CreatedAt > DateTime.UtcNow.AddDays(-7))
                        {
                            <span class="discount-badge bg-success">New</span>
                        }
                    </div>
                    <div class="product-info">
                        <h3>
                            <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id">@product.Name</a>
                        </h3>
                        @{
                            string descriptionText;
                            if (string.IsNullOrEmpty(product.Description))
                            {
                                descriptionText = "No description available";
                            }
                            else if (product.Description.Length > 50)
                            {
                                descriptionText = product.Description.Substring(0, 50) + "...";
                            }
                            else
                            {
                                descriptionText = product.Description;
                            }
                        }
                        <p>@descriptionText</p>
                        
                        <!-- Rating Stars -->
                        <div class="product-rating mb-2">
                            <div class="stars">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="bi @(i <= Math.Round(product.AverageRating) ? "bi-star-fill" : "bi-star")"></i>
                                }
                            </div>
                            <span class="rating-count">(@product.ReviewCount)</span>
                        </div>
                        
                        <div class="product-price">
                            <span class="current-price">$@product.Price.ToString("F2")</span>
                        </div>
                        
                        <div class="product-actions">
                            <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" class="btn btn-outline btn-sm">
                                <i class="bi bi-eye me-1"></i>Details
                            </a>
                            <button type="button" class="btn btn-primary btn-sm" onclick="addToCart(@product.Id, 1)" @(product.Stock <= 0 ? "disabled" : "")>
                                <i class="bi bi-cart-plus me-1"></i>Add to Cart
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (!Model.Any())
        {
            <div class="alert alert-info text-center my-5">
                <i class="bi bi-search me-2"></i>No products found matching your criteria. Try adjusting your search.
            </div>
        }
    </div>
</section>

@section Styles {
    <style>
        .product-rating {
            display: flex;
            align-items: center;
        }
        
        .stars {
            color: #f7c32e;
            font-size: 0.9rem;
        }
        
        .rating-count {
            color: #64748B;
            font-size: 0.8rem;
            margin-left: 5px;
        }
        
        .product-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }
        
        .product-actions .btn {
            flex: 1;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize form with AJAX filtering
            setupProductFilter();
        });
        
        function setupProductFilter() {
            const filterForm = document.querySelector('form[asp-action="Index"]');
            const productContainer = document.querySelector('.product-grid').parentElement;
            
            if (filterForm) {
                // For instant filtering (when user changes a dropdown or enters search)
                filterForm.querySelectorAll('select, input[type="text"]').forEach(element => {
                    element.addEventListener('change', debounce(function() {
                        applyFilters();
                    }, 500));
                });
                
                // For number inputs (min/max price), use input event with debounce
                filterForm.querySelectorAll('input[type="number"]').forEach(element => {
                    element.addEventListener('input', debounce(function() {
                        applyFilters();
                    }, 800));
                });
                
                // For the form submission
                filterForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    applyFilters();
                });
            }
            
            function applyFilters() {
                // Show loading state
                productContainer.innerHTML = '<div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                
                // Get all form data
                const formData = new FormData(filterForm);
                const params = new URLSearchParams();
                
                for (let pair of formData.entries()) {
                    // Only add non-empty values
                    if (pair[1]) {
                        params.append(pair[0], pair[1]);
                    }
                }
                
                // Update URL without reloading page
                window.history.pushState({}, '', `${window.location.pathname}?${params.toString()}`);
                
                // Fetch filtered results
                fetch(`/Product/GetFilteredProducts?${params.toString()}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text();
                    })
                    .then(html => {
                        // Replace content with new results
                        productContainer.innerHTML = html;
                    })
                    .catch(error => {
                        console.error('Error fetching filtered products:', error);
                        productContainer.innerHTML = `<div class="alert alert-danger">Error loading products. Please try again.</div>`;
                    });
            }
            
            // Debounce function to prevent too many requests
            function debounce(func, wait) {
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => {
                        func.apply(context, args);
                    }, wait);
                };
            }
        }
    </script>
}